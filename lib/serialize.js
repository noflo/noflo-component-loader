const path = require('path');

function modulesToData(modules, options) {
  const data = {
    sources: [],
    components: [],
    loaders: [],
    icons: [],
  };

  modules.forEach((module) => {
    if (module.icon) {
      data.icons.push({
        module: module.name,
        icon: module.icon,
      });
    }
    if (module.noflo && module.noflo.loader) {
      const loaderPath = path.resolve(options.baseDir, module.base, module.noflo.loader);
      data.loaders.push(loaderPath);
    }
    if (!module.components) {
      return;
    }
    module.components.forEach((component) => {
      const componentPath = path.resolve(options.baseDir, component.path);
      data.components.push({
        module: module.name,
        name: component.name,
        path: componentPath,
      });
    });
  });

  return Promise.resolve(data);
}

function registerIcon(icon) {
  let iconModule = icon.module;
  if (!iconModule) {
    iconModule = null;
  }
  return `loader.setLibraryIcon(${JSON.stringify(iconModule)}, ${JSON.stringify(icon.icon)});`;
}

function registerComponent(component) {
  let componentModule = component.module;
  if (!componentModule) {
    componentModule = null;
  }
  return `loader.registerComponent(${JSON.stringify(componentModule)}, ${JSON.stringify(component.name)}, require(${JSON.stringify(component.path)}));`;
}

function produceLoader(data) {
  return Promise.resolve(`
// File generated by noflo-component-loader on ${new Date().toISOString()}
var baseLoader = require('noflo-component-loader/lib/loader.js');
var sources = ${JSON.stringify(data.sources)};

exports.setSource = function (loader, packageId, name, source, language, callback) {
  baseLoader.setSource(sources, loader, packageId, name, source, language, callback);
};
exports.getSource = function (loader, name, callback) {
  baseLoader.getSource(sources, loader,  name, callback);
}

exports.register = function (loader, callback) {
  ${data.icons.map(registerIcon).join('\n  ')}
  ${data.components.map(registerComponent).join('\n  ')}
  baseLoader.registerCustomLoaders(loader, ${JSON.stringify(data.loaders)}, callback);
};
  `);
}

function serializeLoader(modules, options) {
  return modulesToData(modules, options)
    .then(produceLoader);
}

module.exports = serializeLoader;
